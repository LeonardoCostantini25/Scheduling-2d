
import subprocess
import os
import pandas as pd

# Path to the input and output directories
input_dir = 'input_files'
output_dir = 'output_images'
stats_file = 'simulation_stats.xlsx'

# Script to run
script = 'scheduling_2d_processors_limit.py'
max_usage_perc = 0.80


def run_script(script_name, input_path, output_path):
    try:
        result = subprocess.run(['python3', script_name, input_path, output_path], capture_output=True, text=True, check=True)
        if result.returncode != 0:
            print(f"Errore nell'esecuzione di {script_name} con input {input_path} e output {output_path}:\n{result.stderr.strip()}")
            return None
        else:
            print(f"Output di {script_name} con input {input_path}:\n{result.stdout.strip()}")
            return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Errore nell'esecuzione di {script_name} con input {input_path} e output {output_path}:\n{e.stderr.strip()}")
        return None
    except Exception as e:
        print(f"Errore imprevisto nell'esecuzione di {script_name} con input {input_path} e output {output_path}:\n{str(e)}")
        return None

# Ensure the output directory exists
max_usage_output_dir = os.path.join(output_dir, f"max_use_{int(max_usage_perc * 100)}%")
os.makedirs(max_usage_output_dir, exist_ok=True)
# List to store the statistics
stats = []

# Iterate over the input files and run the script
for input_file in os.listdir(input_dir):
    input_path = os.path.join(input_dir, input_file)
    output_path = os.path.join(max_usage_output_dir, os.path.splitext(input_file)[0] + '.png')

    print(f"Esecuzione di {script} con input {input_path} e output {output_path}...")
    output = run_script(script, input_path, output_path)
    if output:
        # Extract statistics from the output
        # This assumes the output contains CSV-formatted statistics
        try:

            stat_lines = output.splitlines()
            stats_entry = {
                'Input': input_file,
                'Altezza Massima': None,
                'Altezza Ideale': None,
                'Balance Index': None,
                'OP': None
                }
            
            for line in stat_lines:
                line = line.strip()
                if "L'altezza MASSIMA che abbiamo raggiunto è:" in line:
                    value = line.split("è: ")[1].strip()
                    stats_entry['Altezza Massima'] = value
                elif "L'altezza IDEALE che abbiamo raggiunto è:" in line:
                    value = line.split("è: ")[1].strip()
                    stats_entry['Altezza Ideale'] = value
                elif "L'indice di bilanciamento è:" in line:
                    value = line.split("è: ")[1].strip()
                    stats_entry['Balance Index'] = value
                elif "L'OP registrato è:" in line:
                    value = line.split("è: ")[1].strip()
                    stats_entry['OP'] = value
    
            # Aggiungi l'entry solo se almeno una delle altezze è stata trovata
            if stats_entry['Altezza Massima'] or stats_entry['Altezza Ideale']:
                stats.append(stats_entry)

        except Exception as e:
            print(f"Errore nel parsing delle statistiche dall'output di {script} con input {input_path}:\n{str(e)}")

    print(f"Terminato {script} con input {input_path}\n")

# Save the statistics to an Excel file
if stats:
    df = pd.DataFrame(stats)
    df.to_excel(stats_file, index=False)
    print(f"Statistiche salvate in {stats_file}")

print("Tutte le simulazioni sono state eseguite.")
